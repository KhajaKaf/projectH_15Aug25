// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           String   @id @default(cuid())
  name         String   @unique
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  price       Float
  image       String?
  description String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  categoryId String

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("menu_items")
}

model Table {
  id             String      @id @default(cuid())
  number         String      @unique // e.g., "T01", "T02"
  qrCode         String      @unique // QR code identifier
  status         TableStatus @default(AVAILABLE)
  capacity       Int         @default(4)
  currentOrderId String?     @unique
  currentOrder   Order?      @relation("TableCurrentOrder", fields: [currentOrderId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  orders Order[]

  @@map("tables")
  @@index([status])
}

model Order {
  id            String      @id @default(cuid())
  customerPhone String?     @db.VarChar(32)
  subtotal      Float
  tax           Float
  total         Float
  status        OrderStatus @default(NEW)
  estimatedTime Int? // in minutes
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // NEW: sequential token visible to customers
  tokenNumber   Int?        @unique
  
  // Foreign Keys
  tableId String

  // Relations
  table       Table        @relation(fields: [tableId], references: [id])
  orderItems  OrderItem[]
  orderEvents OrderEvent[]
  payment     Payment?
  currentOf   Table?       @relation("TableCurrentOrder")

  @@map("orders")
  @@index([status])
  @@index([tableId])
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())

  // Foreign Keys
  orderId    String
  menuItemId String

  // Relations
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model OrderEvent {
  id        String      @id @default(cuid())
  status    OrderStatus
  notes     String?
  createdBy String? // admin/manager who made the change
  createdAt DateTime    @default(now())

  // Foreign Keys
  orderId String

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_events")
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id])
  method    PaymentMethod @default(STATIC_QR)
  status    PaymentStatus @default(AWAITING_CONFIRMATION)
  txRef     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("payments")
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  LOCKED_FOR_BILLING
  RESERVED
  MAINTENANCE
}

enum OrderStatus {
  NEW
  CONFIRMED
  IN_PROGRESS
  READY
  DELIVERED
  PAYMENT_PENDING
  PAID
  SERVED
  CANCELLED
  REJECTED
}

enum PaymentMethod {
  STATIC_QR
}

enum PaymentStatus {
  AWAITING_CONFIRMATION
  PAID
  FAILED
}

enum UserRole {
  ADMIN
  STAFF
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  role         UserRole @default(STAFF)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}
